#!/bin/bash
# enforce_policy.sh
# Purpose: Check and optionally remediate a set of security policies described in the lab.
# Usage: sudo ./enforce_policy.sh [--remediate] [--force] [--log /path/to/logfile]
#   --remediate : attempt to fix violations (uses sudo where necessary)
#   --force     : when used with --remediate will perform changes without additional prompts
#   --log PATH  : specify log file (default ./enforce_policy.log)
#
# WARNING: The remediation actions may modify system files and require root privileges.
# This script will *simulate* actions unless run as root with --remediate --force.
# Read the code and test in a non-production environment first.
#
# Well-commented, idempotent where possible, logs actions with timestamps, and writes alerts.
# Author: ChatGPT (system admin example)

LOGFILE="./enforce_policy.log"
REMEDIATE=0
FORCE=0
DATE_CMD="$(date '+%Y-%m-%d %H:%M:%S')"

# helper: log message with timestamp
log() {
  local msg="$1"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $msg" | tee -a "$LOGFILE"
}

# helper: run or simulate a command
run_cmd() {
  local cmd="$1"
  if [[ $REMEDIATE -eq 1 && $EUID -eq 0 ]]; then
    if [[ $FORCE -eq 1 ]]; then
      log "EXECUTING: $cmd"
      eval "$cmd" >> "$LOGFILE" 2>&1 || log "ERROR: command failed: $cmd"
    else
      log "WOULD EXECUTE (remediate without --force): $cmd"
    fi
  else
    log "SIMULATED: $cmd"
  fi
}

# parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --remediate) REMEDIATE=1; shift ;;
    --force) FORCE=1; shift ;;
    --log) LOGFILE="$2"; shift 2 ;;
    -h|--help) sed -n '1,200p' "$0"; exit 0 ;;
    *) echo "Unknown arg: $1"; exit 1 ;;
  esac
done

# start
touch "$LOGFILE" 2>/dev/null || { echo "Cannot write logfile $LOGFILE. Exiting."; exit 1; }
log "Starting policy enforcement script. Remediate=$REMEDIATE, Force=$FORCE, Log=$LOGFILE"

# 1) USER ACCOUNT POLICIES
log "Checking user accounts for unique accounts and home directory permissions."

declare -A uid_map
while IFS=: read -r username passwd uid gid comment homedir shell; do
  if [[ -z "$username" ]]; then continue; fi
  if [[ -n "${uid_map[$uid]}" ]]; then
    log "ALERT: UID collision for UID $uid: ${uid_map[$uid]} and $username"
  else
    uid_map[$uid]="$username"
  fi
  if [[ -d "$homedir" && "$homedir" == /home/* ]]; then
    perms=$(stat -c '%a' "$homedir" 2>/dev/null || echo "000")
    if [[ "$perms" != "700" ]]; then
      log "Violation: Home dir $homedir for user $username has perms $perms (expected 700)"
      run_cmd "chmod 700 '$homedir'"
    fi
  fi
done < /etc/passwd

log "NOTE: Account creation approval policy must be enforced by process - cannot be fully automated."

log "Checking password policy configuration (length, complexity, aging)."
if [[ -r /etc/login.defs ]]; then
  grep -i '^PASS_MAX_DAYS' /etc/login.defs | sed -n '1p' | tee -a "$LOGFILE"
  grep -i '^PASS_MIN_LEN' /etc/login.defs | sed -n '1p' | tee -a "$LOGFILE"
fi
while IFS=: read -r username passwd uid gid comment homedir shell; do
  if [[ "$uid" -lt 1000 ]]; then continue; fi
  if ! id "$username" &>/dev/null; then continue; fi
  maxdays=$(chage -l "$username" 2>/dev/null | awk -F: '/Maximum/{gsub(/ /,"",$2); print $2}' )
  if [[ -z "$maxdays" || "$maxdays" -eq "99999"]()]()
